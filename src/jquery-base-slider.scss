/***********************************************
jquery-base-slider.scss, Description from README.md

    (c) 2015, Niels Holt

    https://github.com/NielsHolt/jquery-base-slider
    https://github.com/NielsHolt

There are four different types of sliders:
default, small, round and range

The type is set by adding the same class-name to the outer <span> eq. <span class="base-slider round....">

The scss is divided in two parts: First the common part equal for all types and then a specified part for the different types

************************************************/
//BOURBON - http://bourbon.io/
@import "../bower_components/bourbon/app/assets/stylesheets/bourbon";

@function myRem($pxval) {
  $base: 16;
  $em-base: 16px;
  @return ($pxval / $em-base) * 1rem;
}


//'Global' variables
$border-color    : rgb(175,179,187);
$shadow-color    : rgb(175,179,187);
$background-color: rgb(209,214,224);

//marker = small boxes over min- and max and from- anf to-slider
$markerTop              : myRem(0px);
$markerFontSize         : myRem(10px);
$markerLineHeight       : 1.333;
$markerTopBottomPadding : myRem(1px);
$markerBorderSize       : myRem(1px);
$markerStickHeight      : myRem(3px);

$markerHeight           : $markerBorderSize + $markerTopBottomPadding + $markerFontSize*$markerLineHeight + $markerTopBottomPadding + $markerBorderSize + $markerStickHeight;

//slider
$sliderTop        : $markerTop + $markerHeight;
$sliderTopNoMarker: $markerTop;

//The line
$lineHeight      : myRem(6px);
$lineBorderSize  : myRem(1px);
$lineBorderRadius: myRem(2px);

//The line when it is a range-slider
$rangeLineTop        : $markerHeight;
$rangeLineTopNoMarker: myRem(0px);

//Special: Pin marking a value
$pinHeight   : 48 / 28 * $lineHeight;  //The height of the pin used to mark the range-value. Calculated to fit with width=$lineHeight
$pinMarginTop: -0.8 * $pinHeight; 

$rangeValueLineTop: $markerHeight;


//Ticks on grids
$tickWidth      : myRem(1px); 
$tickHeightMinor: $lineHeight;
$tickHeight     : 1.5 * $tickHeightMinor;
$labelFontSize  : myRem(9px);
$labelHeight    : 1.2 * $labelFontSize;
$margin         : myRem(2px);

//Font-icons from http://fontello.com/
@font-face {
    font-family: "range-slider";
    src: url('fonts/range-slider.woff?15990756') format('woff');
}


.base-slider-container-outer {
    left      : 0;
    width     : 100%; 
    height    : 100%;
    overflow-x: hidden;

    .base-slider-container-full-width {
        position  : relative;
        left      : 0;
        overflow-y: visible;
    }
}

/***************************************************************
COMMON STYLE
***************************************************************/
.base-slider-container {
    position   : relative; 
    display    : block;
    user-select: none;

    .line {

        position: relative; 
        display: block;
        overflow: hidden;
        outline: none !important;
        box-sizing: border-box;
        height: $lineHeight; 

        border: solid $lineBorderSize $border-color;
        @include border-right-radius($lineBorderRadius);
        @include border-left-radius($lineBorderRadius);
        box-shadow: inset 0px myRem(1px) myRem(1px) 0 $shadow-color; 

        background-color: $background-color;
        cursor: pointer;

        .line-left { 
            position: absolute; 
            display: none;
            top: 0;
            left: 0; 
            width: 11%;
            height: 100%;
        } 
    } //end of .line

    //Adjust display and background-color when impact or impact-revers is set
    &.impact-line .line, &.impact-line-reverse .line {
        box-shadow: none !important;
        .line-left { display: block; }
    }

    &.impact-line .line {
        .line-left { background-color: green; }
        background-color: red;
    }
    
    &.impact-line-reverse .line {
        .line-left { background-color: red; }
        background-color: green;
    }

    .bar {
        position  : absolute; 
        display   : block;
        box-sizing: border-box;
        left      : 0; 
        width     : 0;
        height    : $lineHeight; 

        border: solid $lineBorderSize $border-color;
        @include border-left-radius($lineBorderRadius);
        border-right: none;
        cursor: pointer;

        background-color: #428BCA;
        &.hide-bar-color { background-color: inherit }
    }

    &.impact-line .bar, &.impact-line-reverse .bar {
        background-color: yellow;
    }
    

    //Adjust cursor when slider is disabled or read-only
    &.not-clicable .line,
    &.not-clicable .bar,
    &.disabled .line,
    &.disabled .bar,
    &.read-only .line,
    &.read-only .bar { 
        cursor: default;
    } 


    //The slider
    .slider {
        position: absolute; 
        display : block;
        cursor  : default;
        z-index : 10;
        top     : $sliderTop;

        background-size: 100% 100%;
        background-repeat: no-repeat;

        &.type_last { z-index: 12; }

    } //end of .slider

    &.active .slider { cursor: pointer; }

    //Special version when slider == 'range' and/or when a pin is added: using font-icons instead of background-image
    &.range .slider,
    & .pin {
        position: absolute; 
        cursor  : default !important;
        z-index : 100;

        //Slider with font-icon
        font-family    : "range-slider";
        font-size      : $lineHeight;
        font-style     : normal;
        font-weight    : normal;
        font-variant   : normal;
        text-transform : none;
        speak          : none;
        text-decoration: inherit;
 
        display: inline-block;

        text-align : center;
        line-height: 1em;
 
        &.from {
            text-align: right;
            &:before { content: '\e801'; } // |< 
        }
        &.to { 
            text-align: left;
            &:before { content: '\e800'; } // >| 
        }

        &.pin { 
            height    : $pinHeight !important;
            margin-top: $pinMarginTop;
        
            font-size : $pinHeight;
            text-align: center;

            background-image: none !important;

            &:before { content: '\e802'; } // marker 
        }
    } //end of .range-slider


    //Marker: Current, min and max-marker/labels
    .marker-min, .marker-max {
        position        : absolute; 
        display         : block;
        cursor          : default;
        color           : #555;
        font-family     : Arial, sans-serif; 
        font-size       : $markerFontSize; 
        line-height     : $markerLineHeight;
        text-shadow     : none;
        top             : $markerTop; 
        padding         : $markerTopBottomPadding myRem(3px);
        border          : solid $markerBorderSize $border-color;
        background-color: $background-color;
        border-radius   : myRem(2px);

        &.marker-min { left: 0;  }
        &.marker-max { right: 0; }
    }

    .marker-from, .marker-to, .marker-single {
        position   : absolute; 
        display    : block;
        top        : $markerTop + $markerBorderSize; 
        left       : 0;
        cursor     : default;
        white-space: nowrap;
        color      : #111;
        font-family: Arial, sans-serif; 
        font-size  : $markerFontSize; 
        line-height: $markerLineHeight;
        text-shadow: none;
        padding    : $markerTopBottomPadding myRem(5px);
    }
    
    //If not force edge => add border and stick
    //.marker-frame & {
    &.marker-frame .marker-from, 
    &.marker-frame .marker-to, 
    &.marker-frame .marker-single {
        top          : $markerTop; 
        background   : white;
        border       : $markerBorderSize solid black;
        border-radius: myRem(4px);
        &:after {
            position        : absolute; 
            display         : block; 
            content         : "";
            bottom          : -2.3*$markerStickHeight; 
            left            : 50%;
            width           : 0; 
            height          : 0;
            margin-left     : -1*$markerStickHeight;
            overflow        : hidden;
            border          : $markerStickHeight solid transparent;
            border-top-color: black;
        }
    }
} //end of .base-slider-container



.grid {
    position: absolute; 
    bottom  : 0; 
    left    : 0;
    z-index : 2;
    width   : 100%; 
    height  : $tickHeight + $margin + $labelHeight; 
    &.text-between-ticks { 
        height: $margin + max($tickHeight, $labelHeight); 
        .grid-text { top: $margin; }; 
    }
    
    .grid-pol {
        position  : absolute;
        z-index   : 2;
        top       : 0; 
        left      : 0;
        width     : $tickWidth; 
        height    : $tickHeight;
        background: black; 
        box-shadow: 1px 1px 1px 0px rgba(255,255,255,0.75), -1px 1px 1px 0px rgba(255,255,255,0.75);

        &.minor { height: $tickHeightMinor; background: #555555; }
        &.red   { background: red; }
    }

    .grid-text {
        position: absolute;
        z-index : 2;
        top     : $tickHeight + $margin;
        &.low { 
            top: $tickHeight + $margin + $labelHeight + $margin; 
        }

        left: 0;
        white-space: nowrap;
        text-align : center;
        font-family: Arial, sans-serif; 

        font-size  : $labelFontSize; 
        line-height: 1; 
        font-weight: bold;
        &.minor  { font-weight: normal; color: #555555;}
        &.italic { font-style: italic; }

        padding: 0;
        
        color: #000;
        cursor: default; 
        &.clickable { cursor: pointer; }
    }

    .grid-color {
        position: absolute;
        z-index : 1;
        top     : 0; 
        height  : $tickHeight;

        font-family    : "range-slider";
        font-size      : 1.2*$tickHeight;
        font-style     : normal;
        font-weight    : normal;
        font-variant   : normal;
        text-transform : none;
        speak          : none;
        text-decoration: inherit;
 
        text-align : center;
        line-height: $tickHeight;
         overflow: hidden;

        &.gt_max {
            width: $tickHeight;
            left: 100%;
            text-align: right;
            &:before { content: '\e803'; } // >
        }
        &.lt_min { 
            width: $tickHeight;
            left: -$tickHeight; 
            transform: scaleX(-1);
            text-align: left;
            &:before { content: '\e803'; } // <
        }

    }


} //end of .grid


.disabled {
    opacity: 0.4;
}


.hidden-input {
    position    : absolute !important;
    display     : block !important;
    top         : 0 !important;
    left        : 0 !important;
    width       : 0 !important;
    height      : 0 !important;
    font-size   : 0 !important;
    line-height : 0 !important;
    padding     : 0 !important;
    margin      : 0 !important;
    outline     : none !important;
    z-index     : -9999 !important;
    background  : none !important;
    border-style: solid !important;
    border-color: transparent !important;
}

/***************************************************************
STYLE FOR SPECIFIC TYPE
***************************************************************/
$sliderTypeList: default, small, round, range, fixed;

@each $sliderType in $sliderTypeList {
    $sliderWidth                : null; 
    $sliderHeight               : null;
    $lineTopRelativeToSlider    : null;
    $sliderBackgroundImage      : null;
    $sliderBackgroundImage_hover: null;
    $gridTop                    : null;

    @if $sliderType == default {
    //TYPE == default            
        $sliderWidth : myRem(11px); 
        $sliderHeight: myRem(18px);
        $lineTopRelativeToSlider: $sliderHeight/2 - $lineHeight/2;

        $sliderBackgroundImage      : url("images/slider.default.png");
        $sliderBackgroundImage_hover: url("images/slider.default.hover.png");

    } @else if $sliderType == small {
    //TYPE == small
        $sliderWidth : myRem(13px); 
        $sliderHeight: myRem(15px); 
        $lineTopRelativeToSlider: $lineBorderRadius;

        $sliderBackgroundImage      : url("images/slider.small.png");
        $sliderBackgroundImage_hover: url("images/slider.small.hover.png");

    } @else if $sliderType == round {
    //TYPE == round
        $sliderWidth : myRem(12px);
        $sliderHeight: myRem(12px);
        $lineTopRelativeToSlider: $sliderHeight/2 - $lineHeight/2; 

        $sliderBackgroundImage      : url("images/slider.round.png");
        $sliderBackgroundImage_hover: url("images/slider.round.hover.png"); 


    } @else if $sliderType == range {
    //TYPE == range
        $sliderHeight: $lineHeight; 
        $sliderWidth : $sliderHeight; 
        $lineTopRelativeToSlider: $sliderHeight/2 - $lineHeight/2; 

    } @else if $sliderType == fixed {
    //TYPE == fixed 
        $margin: $tickWidth; //Border-width/margin = $tickWidth

        $sliderHeight           : myRem(18px); 
        $sliderWidth            : myRem(11px); 
        $lineTopRelativeToSlider: 2 * $margin;
        $gridTop                : $sliderTop + $lineTopRelativeToSlider + $margin + $lineHeight; // = $lineTop + $margin  + lineHeight
        
        $sliderBackgroundImage      : url("images/slider.fixed.png");
        $sliderBackgroundImage_hover: null; 

    }

    $lineTop        : $sliderTop         + $lineTopRelativeToSlider;
    $lineTopNoMarker: $sliderTopNoMarker + $lineTopRelativeToSlider;

    //The style for different slider-type
    .base-slider-container.#{$sliderType} {
       
        //width, height and postion    
        .line, .bar {
            top: $lineTop;
        }
        .slider {
            box-sizing: border-box;
            width : $sliderWidth; 
            height: $sliderHeight;
            @if $sliderBackgroundImage != null {
                background-image: $sliderBackgroundImage;
            }
        }

        .pin { 
            top: $lineTop;                    
        }

        @if $sliderBackgroundImage_hover != null {
            //hover on slider but only if it is active (not read-only)
            &.active .slider {
                &.state_hover, &:hover { 
                    background-image: $sliderBackgroundImage_hover;
                } 
            }
        }
        .grid {
            @if $gridTop == null {            
                top: $sliderTop + $sliderHeight;
            } @else {
                top: $gridTop;
            }
        }


        //Adjust grid position if ticks are on the line (ticks_on_line = true)
        &.ticks-on-line {
            .grid             { top: $lineTop;         }
            &.no-marker .grid { top: $lineTopNoMarker; }
        }

        //Adjust all top-position if there are no marker
        &.no-marker {
            .line, 
            .bar,
            .pin    { top: $lineTopNoMarker !important;        }
            .slider { top: $sliderTopNoMarker;                 }
            .grid   { top: $sliderTopNoMarker + $sliderHeight; }
        }

        /****************************************************
        Special case for no marker and pin: 
        Adjust all top-position by adding top-margin if the pin is heigher than the slider
        ****************************************************/
        &.no-marker.has-pin {
            margin-top: max(0, - $pinMarginTop - $lineTopNoMarker);
        }
    } //end of .base-slider-container.#{$sliderType}
} //end of @each $sliderType in $sliderTypeList 

